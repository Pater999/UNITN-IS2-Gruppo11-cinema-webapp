swagger: '2.0'
info:
  version: '1.0'
  title: "SmartCinema"
  description: "Progetto di INGSOFT 2 - 2020"
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: polls.apiblueprint.org
basePath: /api
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /v1/admin/login:
    x-summary: Login
    post:
      summary: Send login data
      parameters:
        - name: admin
          in: body
          required: true
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                description: "Username of the admin"
              password:
                type: string
                description: "Password of the admin"
      responses:
        200:
          description: Logged in correctly
          schema:
            $ref: '#/definitions/LogInAdminDTO'
        400:
          description: User or password not specified
        401:
          description: Admin not logged in correctly
        
          
  /v1/admin/fares:
    get:
      summary: "List all the tickets' fares"
      responses:
        200:
          description: "Collection of tickets' fares"
          schema:
            type: array
            items:
              $ref: "#/definitions/FareDTO"
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
    post:
      summary: "Add a new tickets' fare"
      parameters:
        - in: body
          name: fare
          required: true
          
          schema:
            type: object
            required:
              - name
              - price
              - desc
        
            properties:
              name:
                type: string
                description: "fare's name"
              price: 
                type: number
                description: "fare's price"
              desc:
                type: string
                description: "fare's description"
          
      responses:
        201:
          description: 'Successful add, the fare added'
          schema:
              $ref: '#/definitions/FareDTO'
        400:
          description: Some fields are null or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
          
  /v1/admin/fares/{fareId}:
    parameters:
    - name: "fareId"
      in: "path"
      description: "id of the fare"
      required: true
      type: "integer"
      format: "int32"
    delete:
      summary: "Delete a fare"
      responses:
        200:
          description: Successful response
        400:
          description: fareId is NaN or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Fare not found
        409:
          description: "Conflict: cannot delete a Fare if it is the only one left"
  
  /v1/admin/rooms:
    get:
      summary: "List all cinema's rooms"
      responses:
        200:
          description: "Collection of cinema's rooms"
          schema:
            type: array
            items:
              $ref: "#/definitions/CinemaRoomDTO"
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
    post:
      summary: "Add a new cinema's room"
      parameters:
        - in: body
          name: room
          required: true
          
          schema:
            type: object
            required:
              - name
        
            properties:
              name:
                type: string
                description: "room's name"
          
      responses:
        201:
          description: 'Successful add, room added'
          schema:
              $ref: '#/definitions/CinemaRoomDTO'
        400:
          description: Some fields are null or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
          
  /v1/admin/rooms/{roomId}:
    parameters:
    - name: "roomId"
      in: "path"
      description: "id of the cinema's room"
      required: true
      type: "integer"
      format: "int32"
    put:
      summary: Update a cinema's room
      parameters:
        - in: body
          name: room
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "Room's name"
      responses:
        200:
          description: "Successful update, cinema's room update"
          schema:
            $ref: '#/definitions/CinemaRoomDTO'
        400:
          description: Some fields are null or empty
        401:
          description: User not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Cinema's room not found
          
    delete:
      summary: "Delete a cinema room"
      responses:
        200:
          description: Successful response, room deleted
        400:
          description: roomId is NaN or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Cinema's room not found
        409:
          description: "Conflict: cannot delete a room with active reservations or actions"
          
definitions:
  LogInAdminDTO:
    type: object
    required:
      - token
      - username

    properties:
      token:
        type: string
        description: 'token'
      username:
        type: string
        description: 'Admin username'
        
        
  FareDTO:
    type: object
    required:
      - fareId
      - name
      - price
      - desc
      
    properties:
      fareId:
        type: integer
        format: "int32"
        description: "fare's id"
      name:
        type: string
        description: "fare's name"
      price: 
        type: number
        description: "fare's price"
      desc:
        type: string
        description: "fare's description"
  
        
  CinemaRoomDTO:
    type: object
    required:
      - roomId
      - name
      - seats
      
    properties:
      roomId:
        type: integer
        format: "int32"
        description: "room's id"
      name:
        type: string
        description: "room's name"
      seats: 
        type: number
        description: "number of seats"