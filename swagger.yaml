swagger: '2.0'
info:
  version: '1.0'
  title: "SmartCinema"
  description: "Progetto di INGSOFT 2 - 2020"
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: smart-cinema.herokuapp.com
basePath: /api/v1
schemes:
- https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
consumes:
- application/json
produces:
- application/json
paths:
  /login:
    x-summary: Login
    post:
      summary: Send login data
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                description: "Username"
                example: "admin"
              password:
                type: string
                description: "User's Password"
                example: "admin"
      responses:
        200:
          description: Logged in correctly
          schema:
            $ref: '#/definitions/LogInDTO'
        400:
          description: User or password not specified
        401:
          description: Wrong password
        404:
          description: Username not found
        500:
          description: Internal server error

  /users:
    post:
      summary: Create new user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - surname
              - username
              - email
              - password
            properties:
              name:
                type: string
                description: "Name of the user"
                example: "Paolo"
              surname:
                type: string
                description: "Surname of the user"
                example: "Rossi"
              username:
                type: string
                description: "Username of the user"
                example: "paolorossi"
              email:
                type: string
                description: "Email of the user"
                example: "paolo.rossi@gmail.com"
              password:
                type: string
                description: "Password of the user"
      responses:
        201:
          description: Registered correctly
          schema:
            $ref: '#/definitions/RegisterDTO'
        400:
          description: Some fields are null or empty
        409:
          description: Username already taken
        500:
          description: Internal server error
    
  /fares:
    get:
      summary: "List all the tickets' fares"
      responses:
        200:
          description: "Collection of tickets' fares"
          schema:
            type: array
            items:
              $ref: "#/definitions/FareDTO"
    post:
      security:
        - Bearer: []
      summary: "Add a new tickets' fare"
      parameters:
        - in: body
          name: fare
          required: true
          
          schema:
            type: object
            required:
              - name
              - price
              - desc
        
            properties:
              name:
                type: string
                description: "fare's name"
                example: "Bambini"
              price: 
                type: number
                description: "fare's price"
                example: "10"
              desc:
                type: string
                description: "fare's description"
                example: "Tariffa per bambini"
          
      responses:
        201:
          description: 'Successful add, the fare added'
          schema:
              $ref: '#/definitions/FareDTO'
        400:
          description: Some fields are null or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
          
  /fares/{fareId}:
    parameters:
    - name: "fareId"
      in: "path"
      description: "id of the fare"
      required: true
      type: "string"
    delete:
      security:
        - Bearer: []
      summary: "Delete a fare"
      responses:
        200:
          description: Successful response
        400:
          description: fareId is NaN or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Fare not found
        409:
          description: "Conflict: cannot delete a Fare if it is the only one left"
  
  /rooms:
    get:
      summary: "List all cinema's rooms"
      responses:
        200:
          description: "Collection of cinema's rooms"
          schema:
            type: array
            items:
              $ref: "#/definitions/CinemaRoomDTO"
    post:
      security:
        - Bearer: []
      summary: "Add a new cinema's room"
      parameters:
        - in: body
          name: room
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: "room's name"
                example: "Sala 1"
      responses:
        201:
          description: 'Successful add, room added'
          schema:
              $ref: '#/definitions/CinemaRoomDTO'
        400:
          description: Some fields are null or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
          
  /rooms/{roomId}:
    parameters:
    - name: "roomId"
      in: "path"
      description: "id of the cinema's room"
      required: true
      type: "string"
    put:
      security:
        - Bearer: []
      summary: Update a cinema's room
      parameters:
        - in: body
          name: room
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "Room's name"
                example: "Sala 1"
      responses:
        200:
          description: "Successful update, cinema's room update"
          schema:
            $ref: '#/definitions/CinemaRoomDTO'
        400:
          description: Some fields are null or empty
        401:
          description: User not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Cinema's room not found
          
    delete:
      security:
        - Bearer: []
      summary: "Delete a cinema room"
      responses:
        200:
          description: Successful response, room deleted
        400:
          description: roomId is NaN or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Cinema's room not found
        409:
          description: "Conflict: cannot delete a room with active reservations or actions"
  
  /rooms/{roomId}/rows:
    parameters:
    - name: "roomId"
      in: "path"
      description: "id of the cinema's room"
      required: true
      type: "string"
    get:
      summary: "List all rows of a room"
      responses:
        200:
          description: "Collection of room's row"
          schema:
            type: array
            items:
              $ref: "#/definitions/RoomRowDTO"
    post:
      security:
        - Bearer: []
      summary: "Add a new row to a room"
      parameters:
        - in: body
          name: room
          required: true
          schema:
            type: object
            required:
              - seatsNumber
        
            properties:
              seatsNumber:
                type: integer
                description: "row seats"
                example: "1"
      responses:
        201:
          description: 'Successful add, row added'
          schema:
              $ref: '#/definitions/RoomRowDTO'
        400:
          description: Some fields are null or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
  
  /movies:
    get:
      parameters:
        - in: query
          name: date
          type: string
          format: date
          description: Filter by date
      summary: "List all the movies"
      responses:
        200:
          description: "Collection of movies"
          schema:
            type: array
            items:
              $ref: "#/definitions/MovieDTO"
    post:
        security:
         - Bearer: []
        summary: "Add a new Movie"
        parameters:
          - in: body
            name: movie
            required: true
            
            schema:
              type: object
              required:
                - imageUrl
                - title
                - desc
          
              properties:
                title:
                  type: string
                  description: "movie's name"
                  example: "Revenant"
                imageUrl: 
                  type: string
                  description: "movie's image"
                  example: "https://pad.mymovies.it/filmclub/2011/11/053/locandina.jpg"
                desc:
                  type: string
                  description: "movie's description"   
                  example: "Durante una battuta di caccia nella selvaggia America, Hugh Glass viene attaccato da un orso e lasciato morire. Malgrado l'inimmaginabile dolore, il tradimento dell'amico fidato e l'inverno inclemente, l'uomo cerca inesorabilmente di sopravvivere."
        responses:
          201:
            description: 'Successful add, the movie added'
            schema:
                $ref: '#/definitions/MovieDTO'
          400:
            description: Some fields are null or empty
          401:
            description: Admin not logged in
          403:
            description: Not authorized to do this action
  
  /movies/{movieId}:
    parameters:
    - name: "movieId"
      in: "path"
      description: "id of the movie"
      required: true
      type: "string"
    
    delete:
      security:
        - Bearer: []
      summary: "Delete a movie from the planning"
      responses:
        200:
          description: Successful response, movie deleted
        400:
          description: movieId is NaN or empty
        401:
          description: Admin not logged in
        403:
          description: Not authorized to do this action
        404:
          description: Movie not found
  
  /movies/{movieId}/plannings:
    parameters:
    - name: "movieId"
      in: "path"
      description: "id of the movie"
      required: true
      type: "string"
    post:
        security:
          - Bearer: []
        summary: "Add plannings for a movie"
        parameters:
          - in: body
            name: planning
            required: true
            
            schema:
              type: object
              required:
                - plannings
          
              properties:
                plannings:
                  type: array
                  items:
                    type: object
                    required:
                      - roomId
                      - date
                    properties:
                      roomId:
                        type: number
                        description: "Movie's room"
                        example: "1"
                      date:
                        type: string
                        format: date-time
                        description: "Movie's date time"
                        example: "01/01/2020"
                  description: "Movie's plannings"
        responses:
          201:
            description: 'Successful add, movie plannings added'
            schema:
                $ref: '#/definitions/PlanningDTO'
          400:
            description: Some fields are null or empty
          401:
            description: Admin not logged in
          403:
            description: Not authorized to do this action
            
  /movies/{movieId}/plannings/{planId}/reservations:
    parameters:
      - in: "path"
        name: "movieId"
        description: "id of the movie"
        required: true
        type: "string"
      - in: "path"
        name: "planId"
        description: "id of the plan"
        required: true
        type: "string"
    post:
        security:
          - Bearer: []
        summary: "Book a seat for a movie"
        parameters:
          - in: body
            required: true
            name: reservation
            schema:
              type: object
              required:
                - userId
                - seat
                - fareId
              properties:
                userId:
                  type: string
                  description: "User id"
                  example: "1"
                seat: 
                  type: number
                  description: "Seat number"
                  example: 10
                fareId:
                  type: string
                  description: "Fare id"   
                  example: "1"
        responses:
          201:
            description: "Successful add, movie planning's reservationa added"
            schema:
                $ref: '#/definitions/ReservationDTO'
          400:
            description: Some fields are null or empty
          401:
            description: User not logged in
            
definitions:
  PlanningDTO:
    type: object
    required:
      - room
      - date
    
    properties:
        planningId:
          type: string
          description: "Movie's planning"
          example: "1"
        room:
          type: object
          $ref: "#/definitions/CinemaRoomDTO"
          description: "Movie's room"
          example: ""
        date:
          type: string
          format: date-time
          description: "Movie's date time"
          example: "01/01/2020"
  
  MovieDTO:
    type: object
    required:
      - movieId
      - imageUrl
      - title
      - desc
      - planning
      
    properties:
        movieId:
          type: string
          description: "Movie's Id"
          example: "1"
        imageUrl:
          type: string
          description: "Movie's image Url"
        title:
          type: string
          description: "Movie's title"
          example: "Revenant"
        desc:
          type: string
          description: "Movie desc"
          example: "Durante una battuta di caccia nella selvaggia America, Hugh Glass viene attaccato da un orso e lasciato morire. Malgrado l'inimmaginabile dolore, il tradimento dell'amico fidato e l'inverno inclemente, l'uomo cerca inesorabilmente di sopravvivere."
          
        planning:
          type: array
          items:
             $ref: "#/definitions/PlanningDTO"
          description: "Movie's plannings"

  LogInDTO:
    type: object
    required:
      - token
      - username
      - role
    properties:
      token:
        type: string
        description: 'Bearer Token'
        example: "mmmckdnmow"
      username:
        type: string
        description: 'Username'
        example: "paolorossi"
      role:
        type: string
        description: 'User role'
        example: "admin"
  
  RegisterDTO:
    type: object
    required:
      - id
      - username
      - email
      - name
      - surname
      - role

    properties:
      id:
        type: string
        description: 'User id'
        example: "1"
      username:
        type: string
        description: 'User username'
        example: "paolorossi"
      email:
        type: string
        description: 'User email'
        example: "paolorossi@gmail.com"
      name:
        type: string
        description: 'User name'
        example: "Paolo"
      surname:
        type: string
        description: 'User surname'
        example: "Rossi"
      role:
        type: string
        description: 'User role'
        example: "User"

  FareDTO:
    type: object
    required:
      - fareId
      - name
      - price
      - desc
      
    properties:
      fareId:
        type: string
        format: "int32"
        description: "fare's id"
        example: "1"
      name:
        type: string
        description: "fare's name"
        example: "Bambini"
      price: 
        type: number
        description: "fare's price"
        example: "10"
      desc:
        type: string
        description: "fare's description"
        example: "Tariffa per bambini"
  
  RoomRowDTO:
    type: object
    required:
      - rowId
      - seatsNumber

    properties:
      rowId:
        type: string
        description: "room's id"
        example: "1"
      seatsNumber: 
        type: number
        description: "number of seats"
        example: "20"

  CinemaRoomDTO:
    type: object
    required:
      - roomId
      - name
      - seats

    properties:
      roomId:
        type: string
        description: "room's id"
        example: "1"
      name:
        type: string
        description: "room's name"
        example: "Sala2"
      seats: 
        type: number
        description: "number of seats"
        example: "50"
        
  ReservationDTO:
    type: object
    required:
      - fare
      - user
      - seat
    
    properties:
      reservationId:
        type: string
        description: "Movie's planning reservation id"
        example: "1"
      fare:
        type: object
        $ref: "#/definitions/FareDTO"
        description: "reservation's fare"
      user:
        type: object
        $ref: "#/definitions/RegisterDTO"
        description: "reservation's fare"
      seat: 
        type: number
        description: "seat number"
        example: "50"